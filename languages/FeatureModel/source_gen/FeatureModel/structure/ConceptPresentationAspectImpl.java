package FeatureModel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ComplexFeature;
  private ConceptPresentation props_Feature;
  private ConceptPresentation props_FeatureModel;
  private ConceptPresentation props_Group;
  private ConceptPresentation props_RootFeature;
  private ConceptPresentation props_SimpleFeature;
  private ConceptPresentation props_Split;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ComplexFeature:
        if (props_ComplexFeature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexFeature = cpb.create();
        }
        return props_ComplexFeature;
      case LanguageConceptSwitch.Feature:
        if (props_Feature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Feature = cpb.create();
        }
        return props_Feature;
      case LanguageConceptSwitch.FeatureModel:
        if (props_FeatureModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FeatureModel = cpb.create();
        }
        return props_FeatureModel;
      case LanguageConceptSwitch.Group:
        if (props_Group == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Group = cpb.create();
        }
        return props_Group;
      case LanguageConceptSwitch.RootFeature:
        if (props_RootFeature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RootFeature = cpb.create();
        }
        return props_RootFeature;
      case LanguageConceptSwitch.SimpleFeature:
        if (props_SimpleFeature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SimpleFeature = cpb.create();
        }
        return props_SimpleFeature;
      case LanguageConceptSwitch.Split:
        if (props_Split == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Split");
          props_Split = cpb.create();
        }
        return props_Split;
    }
    return null;
  }
}
