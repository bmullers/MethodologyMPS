package Strategy.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class CoreAsset_Constraints extends BaseConstraintsDescriptor {
  public CoreAsset_Constraints() {
    super(CONCEPTS.CoreAsset$kT);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.matches$qsV8, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_3nc0is_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return SimpleRoleScope.forNamedElements(SLinkOperations.getTargetNode(SNodeOperations.getReference(SNodeOperations.getNodeAncestor(_context.getReferenceNode(), CONCEPTS.CallProcedure$kq, false, false), LINKS.calls$qn3g)), LINKS.parameters$XnTA);
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_3nc0is_a0a0a0a0a1a0a0a0c = new SNodePointer("r:69d5df7c-2750-48bf-8fb4-7cc9b1cba4c6(Strategy.constraints)", "5183203985202857742");

  private static final class CONCEPTS {
    /*package*/ static final SConcept CoreAsset$kT = MetaAdapterFactory.getConcept(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x3416b497162b2badL, "Strategy.structure.CoreAsset");
    /*package*/ static final SConcept CallProcedure$kq = MetaAdapterFactory.getConcept(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x3416b497162b2bacL, "Strategy.structure.CallProcedure");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink matches$qsV8 = MetaAdapterFactory.getReferenceLink(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x3416b497162b2badL, 0x47ee70901066f752L, "matches");
    /*package*/ static final SReferenceLink calls$qn3g = MetaAdapterFactory.getReferenceLink(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x3416b497162b2bacL, 0x47ee70901066f74eL, "calls");
    /*package*/ static final SContainmentLink parameters$XnTA = MetaAdapterFactory.getContainmentLink(0xd7f4c9b7457c4ddfL, 0x8db169fc1d011181L, 0x5fd48bfb9a42636aL, 0x5fd48bfb9a4263a5L, "parameters");
  }
}
