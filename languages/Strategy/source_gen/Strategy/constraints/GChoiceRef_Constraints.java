package Strategy.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.scope.ListScope;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class GChoiceRef_Constraints extends BaseConstraintsDescriptor {
  public GChoiceRef_Constraints() {
    super(CONCEPTS.GChoiceRef$Hz);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.gchoice$gtXn, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_he6ddt_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            final List<SNode> nodes = ListSequence.fromList(new ArrayList<SNode>());
            ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTargetNode(SNodeOperations.getReference(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Strategy$MO, false, false), LINKS.featureModel$WLuc)), CONCEPTS.Group$1i, false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                ListSequence.fromList(nodes).addElement(it);
              }
            });
            return ListScope.forNamedElements(nodes);
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_he6ddt_a0a0a0a0a1a0a0a0c = new SNodePointer("r:69d5df7c-2750-48bf-8fb4-7cc9b1cba4c6(Strategy.constraints)", "2756068550962574099");

  private static final class CONCEPTS {
    /*package*/ static final SConcept GChoiceRef$Hz = MetaAdapterFactory.getConcept(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x47ee70901066f735L, "Strategy.structure.GChoiceRef");
    /*package*/ static final SConcept Strategy$MO = MetaAdapterFactory.getConcept(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x49b80d13b459bcbbL, "Strategy.structure.Strategy");
    /*package*/ static final SConcept Group$1i = MetaAdapterFactory.getConcept(0x50a851c9401b45e3L, 0x83bb77ced6965729L, 0x5fd48bfb9a3fb7ecL, "FeatureModel.structure.Group");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink gchoice$gtXn = MetaAdapterFactory.getReferenceLink(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x47ee70901066f735L, 0x47ee70901066f736L, "gchoice");
    /*package*/ static final SReferenceLink featureModel$WLuc = MetaAdapterFactory.getReferenceLink(0x373945843af4b09L, 0x880a7168a8fb745aL, 0x49b80d13b459bcbbL, 0x47ee70901066f72fL, "featureModel");
  }
}
