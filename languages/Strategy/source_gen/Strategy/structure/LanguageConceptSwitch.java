package Strategy.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractTactic = 0;
  public static final int AppliedTactic = 1;
  public static final int CallProcedure = 2;
  public static final int ChoiceRef = 3;
  public static final int ConcreteTactic = 4;
  public static final int CoreAsset = 5;
  public static final int Delayed = 6;
  public static final int FChoiceRef = 7;
  public static final int GChoiceRef = 8;
  public static final int Strategy = 9;
  public static final int TacticRef = 10;
  public static final int TacticRefTactic = 11;
  public static final int TacticTypeRef = 12;
  public static final int Valuation = 13;
  public static final int Value = 14;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x373945843af4b09L, 0x880a7168a8fb745aL);
    builder.put(0x3416b497162b2ba8L, AbstractTactic);
    builder.put(0x3416b497162b2babL, AppliedTactic);
    builder.put(0x3416b497162b2bacL, CallProcedure);
    builder.put(0x47ee70901066f732L, ChoiceRef);
    builder.put(0x3416b497162b2baaL, ConcreteTactic);
    builder.put(0x3416b497162b2badL, CoreAsset);
    builder.put(0x47ee70901066f747L, Delayed);
    builder.put(0x47ee70901066f733L, FChoiceRef);
    builder.put(0x47ee70901066f735L, GChoiceRef);
    builder.put(0x49b80d13b459bcbbL, Strategy);
    builder.put(0x47ee7090106a4249L, TacticRef);
    builder.put(0x47ee7090106a424aL, TacticRefTactic);
    builder.put(0x47ee7090106a424dL, TacticTypeRef);
    builder.put(0x47ee70901066f745L, Valuation);
    builder.put(0x47ee70901066f744L, Value);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
