package TacticType.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import TacticType.editor.general_StyleSheet.inspectorNameStyleClass;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import TacticType.editor.general_StyleSheet.reservedStyleClass;
import TacticType.editor.general_StyleSheet.enumerationStyleClass;

/*package*/ class Procedure_InspectorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Procedure_InspectorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_mslv0s_0");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createConstant_1());
    editorCell.addEditorCell(createConstant_2());
    editorCell.addEditorCell(createConstant_3());
    editorCell.addEditorCell(createConstant_4());
    editorCell.addEditorCell(createConstant_5());
    editorCell.addEditorCell(createConstant_6());
    editorCell.addEditorCell(createConstant_7());
    editorCell.addEditorCell(createCollection_1());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Procedure");
    editorCell.setCellId("Constant_mslv0s_0");
    Style style = new StyleImpl();
    new inspectorNameStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_mslv0s_1");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_2() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Tactic types are described by a procedure.");
    editorCell.setCellId("Constant_mslv0s_2");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_3() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "A procedure has a name, a procedure type and a list of parameters, whose type is chosen from the asset types");
    editorCell.setCellId("Constant_mslv0s_3");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_4() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Procedures can be implemented by something as simple as scripts, or in the case of more complex procedures, they can be decomposed into subprocedures, and so on.");
    editorCell.setCellId("Constant_mslv0s_4");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_5() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_mslv0s_5");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_6() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Attributes :");
    editorCell.setCellId("Constant_mslv0s_6");
    Style style = new StyleImpl();
    style.set(StyleAttributes.UNDERLINED, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_7() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_mslv0s_7");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_1");
    editorCell.addEditorCell(createCollection_2());
    return editorCell;
  }
  private EditorCell createCollection_2() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_mslv0s_2");
    editorCell.addEditorCell(createCollection_3());
    editorCell.addEditorCell(createCollection_4());
    editorCell.addEditorCell(createCollection_5());
    editorCell.addEditorCell(createConstant_17());
    editorCell.addEditorCell(createCollection_6());
    return editorCell;
  }
  private EditorCell createCollection_3() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_3");
    editorCell.addEditorCell(createConstant_8());
    editorCell.addEditorCell(createConstant_9());
    editorCell.addEditorCell(createConstant_10());
    return editorCell;
  }
  private EditorCell createConstant_8() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "automatic");
    editorCell.setCellId("Constant_mslv0s_8");
    Style style = new StyleImpl();
    new reservedStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_9() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_9");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_10() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "defines if the procedure is automated (e.g. executable code) or manual (e.g. a document)");
    editorCell.setCellId("Constant_mslv0s_10");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_4() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_4");
    editorCell.addEditorCell(createConstant_11());
    editorCell.addEditorCell(createConstant_12());
    editorCell.addEditorCell(createConstant_13());
    return editorCell;
  }
  private EditorCell createConstant_11() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "implementation");
    editorCell.setCellId("Constant_mslv0s_11");
    Style style = new StyleImpl();
    new reservedStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_12() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_12");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_13() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "path to the implementation (optional)");
    editorCell.setCellId("Constant_mslv0s_13");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_5() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_5");
    editorCell.addEditorCell(createConstant_14());
    editorCell.addEditorCell(createConstant_15());
    editorCell.addEditorCell(createConstant_16());
    return editorCell;
  }
  private EditorCell createConstant_14() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "type");
    editorCell.setCellId("Constant_mslv0s_14");
    Style style = new StyleImpl();
    new reservedStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_15() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_15");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_16() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "there are two classes of procedure types, those for decomposed procedures and those for elementary procedures :");
    editorCell.setCellId("Constant_mslv0s_16");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_17() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_mslv0s_17");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_6() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_6");
    editorCell.addEditorCell(createCollection_7());
    editorCell.addEditorCell(createConstant_29());
    editorCell.addEditorCell(createCollection_11());
    return editorCell;
  }
  private EditorCell createCollection_7() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_mslv0s_7");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_18());
    editorCell.addEditorCell(createCollection_8());
    editorCell.addEditorCell(createCollection_9());
    editorCell.addEditorCell(createCollection_10());
    editorCell.addEditorCell(createConstant_28());
    return editorCell;
  }
  private EditorCell createConstant_18() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Decomposed procedure types");
    editorCell.setCellId("Constant_mslv0s_18");
    Style style = new StyleImpl();
    style.set(StyleAttributes.UNDERLINED, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_8() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_8");
    editorCell.addEditorCell(createConstant_19());
    editorCell.addEditorCell(createConstant_20());
    editorCell.addEditorCell(createConstant_21());
    return editorCell;
  }
  private EditorCell createConstant_19() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "sequence");
    editorCell.setCellId("Constant_mslv0s_19");
    Style style = new StyleImpl();
    new enumerationStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_20() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_20");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_21() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "child procedures are executed in order");
    editorCell.setCellId("Constant_mslv0s_21");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_9() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_9");
    editorCell.addEditorCell(createConstant_22());
    editorCell.addEditorCell(createConstant_23());
    editorCell.addEditorCell(createConstant_24());
    return editorCell;
  }
  private EditorCell createConstant_22() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "parallel");
    editorCell.setCellId("Constant_mslv0s_22");
    Style style = new StyleImpl();
    new enumerationStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_23() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_23");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_24() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "child procedures can be executed in parallel");
    editorCell.setCellId("Constant_mslv0s_24");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_10() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_10");
    editorCell.addEditorCell(createConstant_25());
    editorCell.addEditorCell(createConstant_26());
    editorCell.addEditorCell(createConstant_27());
    return editorCell;
  }
  private EditorCell createConstant_25() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "equivalent");
    editorCell.setCellId("Constant_mslv0s_25");
    Style style = new StyleImpl();
    new enumerationStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_26() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_26");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_27() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "child procedures are equivalent alternatives, only one is executed");
    editorCell.setCellId("Constant_mslv0s_27");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_28() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_mslv0s_28");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_29() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, " ");
    editorCell.setCellId("Constant_mslv0s_29");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_11() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_mslv0s_11");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_30());
    editorCell.addEditorCell(createCollection_12());
    editorCell.addEditorCell(createCollection_13());
    editorCell.addEditorCell(createCollection_14());
    editorCell.addEditorCell(createCollection_15());
    return editorCell;
  }
  private EditorCell createConstant_30() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Elementary procedure types");
    editorCell.setCellId("Constant_mslv0s_30");
    Style style = new StyleImpl();
    style.set(StyleAttributes.UNDERLINED, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_12() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_12");
    editorCell.addEditorCell(createConstant_31());
    editorCell.addEditorCell(createConstant_32());
    editorCell.addEditorCell(createConstant_33());
    return editorCell;
  }
  private EditorCell createConstant_31() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "optional");
    editorCell.setCellId("Constant_mslv0s_31");
    Style style = new StyleImpl();
    new enumerationStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_32() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_32");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_33() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "this procedure is not necessarily executed");
    editorCell.setCellId("Constant_mslv0s_33");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_13() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_13");
    editorCell.addEditorCell(createConstant_34());
    editorCell.addEditorCell(createConstant_35());
    editorCell.addEditorCell(createConstant_36());
    return editorCell;
  }
  private EditorCell createConstant_34() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "loop");
    editorCell.setCellId("Constant_mslv0s_34");
    Style style = new StyleImpl();
    new enumerationStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_35() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_35");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_36() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "this procedure is repeated one or more times");
    editorCell.setCellId("Constant_mslv0s_36");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_14() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_14");
    editorCell.addEditorCell(createConstant_37());
    editorCell.addEditorCell(createConstant_38());
    editorCell.addEditorCell(createConstant_39());
    return editorCell;
  }
  private EditorCell createConstant_37() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "parloop");
    editorCell.setCellId("Constant_mslv0s_37");
    Style style = new StyleImpl();
    new enumerationStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_38() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_38");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_39() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "same as loop but can happen in parallel");
    editorCell.setCellId("Constant_mslv0s_39");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_15() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_mslv0s_15");
    editorCell.addEditorCell(createConstant_40());
    editorCell.addEditorCell(createConstant_41());
    editorCell.addEditorCell(createConstant_42());
    return editorCell;
  }
  private EditorCell createConstant_40() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "simple");
    editorCell.setCellId("Constant_mslv0s_40");
    Style style = new StyleImpl();
    new enumerationStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_41() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, ":");
    editorCell.setCellId("Constant_mslv0s_41");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_42() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "this procedure is executed exactly once");
    editorCell.setCellId("Constant_mslv0s_42");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
