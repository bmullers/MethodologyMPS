package TacticType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AssetType;
  private ConceptPresentation props_Literal;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_Procedure;
  private ConceptPresentation props_RegexConstraint;
  private ConceptPresentation props_TacticType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AssetType:
        if (props_AssetType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AssetType = cpb.create();
        }
        return props_AssetType;
      case LanguageConceptSwitch.Literal:
        if (props_Literal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Literal");
          props_Literal = cpb.create();
        }
        return props_Literal;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xd7f4c9b7457c4ddfL, 0x8db169fc1d011181L, 0x5fd48bfb9a42636bL, 0x1d13a7c5fe7bf428L, "type", "", "");
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.Procedure:
        if (props_Procedure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Procedure = cpb.create();
        }
        return props_Procedure;
      case LanguageConceptSwitch.RegexConstraint:
        if (props_RegexConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RegexConstraint");
          props_RegexConstraint = cpb.create();
        }
        return props_RegexConstraint;
      case LanguageConceptSwitch.TacticType:
        if (props_TacticType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TacticType = cpb.create();
        }
        return props_TacticType;
    }
    return null;
  }
}
